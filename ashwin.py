 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "895a9a0b-bd6f-48d3-bf04-58a23f8749c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "# In[9]:\n",
    "\n",
    "\n",
    "#Import necessary libraries\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('spotify dataset(1).csv')\n",
    "\n",
    "# Display the column names in your DataFrame\n",
    "print(\"Column Names:\", df.columns)\n",
    "print(df.head())\n",
    "print(df.tail())\n",
    "\n",
    "# Find the total number of rows\n",
    "total_rows = df.shape[0]\n",
    "\n",
    "# Print the result\n",
    "print(\"Total Rows:\", total_rows)\n",
    "\n",
    "# Feature Selection\n",
    "selected_features = ['track_id', 'track_popularity', 'track_album_release_date',\n",
    "                    'playlist_id', 'playlist_genre', 'playlist_subgenre',\n",
    "                    'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                    'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                    'duration_ms']\n",
    "df = df[selected_features]\n",
    "\n",
    "# Data Transformation\n",
    "label_encoder = LabelEncoder()\n",
    "df['playlist_genre'] = label_encoder.fit_transform(df['playlist_genre'])  # Encode categorical variable 'playlist_genre'\n",
    "\n",
    "scaler = StandardScaler()\n",
    "numeric_features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                    'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                    'duration_ms']\n",
    "\n",
    "df[numeric_features] = scaler.fit_transform(df[numeric_features])  # Standardize numerical features\n",
    "\n",
    "# Data Splitting\n",
    "train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "\n",
    "# In[10]:\n",
    "\n",
    "\n",
    "conda install pandas\n",
    "\n",
    "\n",
    "# In[11]:\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split  \n",
    "\n",
    "# Assuming your data is stored in a CSV file named 'data.csv'\n",
    "df = pd.read_csv('spotify dataset(1).csv')\n",
    "\n",
    "# Feature Selection\n",
    "selected_features = ['track_id', 'track_name', 'track_artist', 'track_popularity',\n",
    "                     'track_album_id', 'track_album_name', 'track_album_release_date',\n",
    "                     'playlist_name', 'playlist_id', 'playlist_genre', 'playlist_subgenre',\n",
    "                     'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                     'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                     'duration_ms']\n",
    "df = df[selected_features]\n",
    "\n",
    "# Data Transformation\n",
    "scaler = StandardScaler()\n",
    "numeric_features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                     'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                     'duration_ms']\n",
    "\n",
    "df[numeric_features] = scaler.fit_transform(df[numeric_features])  # Standardize numerical features\n",
    "\n",
    "# Data Splitting\n",
    "train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Save the Pre-processed Data\n",
    "df.to_csv('preprocessed_data.csv', index=False)\n",
    "train_data.to_csv('train_data.csv', index=False)\n",
    "test_data.to_csv('test_data.csv', index=False)\n",
    "\n",
    "\n",
    "\n",
    "# In[5]:\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Pairplot for numeric features\n",
    "sns.pairplot(df[['danceability', 'energy', 'loudness', 'valence', 'tempo']])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[12]:\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Assuming your data is stored in a CSV file named 'data.csv'\n",
    "df = pd.read_csv('spotify dataset(1).csv')\n",
    "\n",
    "# Feature Selection\n",
    "selected_features = ['track_id', 'track_name', 'track_artist', 'track_popularity',\n",
    "                     'track_album_id', 'track_album_name', 'track_album_release_date',\n",
    "                     'playlist_name', 'playlist_id', 'playlist_genre', 'playlist_subgenre',\n",
    "                     'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                     'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                     'duration_ms']\n",
    "df = df[selected_features]\n",
    "\n",
    "# Data Transformation\n",
    "scaler = StandardScaler()\n",
    "numeric_features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',\n",
    "                     'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',\n",
    "                     'duration_ms']\n",
    "\n",
    "df[numeric_features] = scaler.fit_transform(df[numeric_features])  # Standardize numerical features\n",
    "\n",
    "# Select only the numeric columns\n",
    "numeric_df = df.select_dtypes(include=[np.number])\n",
    "\n",
    "# Correlation matrix heatmap\n",
    "correlation_matrix = numeric_df.corr()\n",
    "plt.figure(figsize=(12, 10))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
    "plt.title('Correlation Matrix Heatmap')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# In[8]:\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('spotify dataset(1).csv')\n",
    "\n",
    "# Check if the 'track_name' column is present\n",
    "if 'track_name' in df.columns:\n",
    "   # Fill any missing values in 'track_name'\n",
    "   df['track_name'].fillna('', inplace=True)\n",
    "\n",
    "   # Create a CountVectorizer to convert text features into vectors\n",
    "   vectorizer = CountVectorizer(stop_words='english')\n",
    "   track_matrix = vectorizer.fit_transform(df['track_name'])\n",
    "\n",
    "   # Calculate the cosine similarity between tracks\n",
    "   cosine_sim = cosine_similarity(track_matrix, track_matrix)\n",
    "\n",
    "   # Function to get recommendations based on cosine similarity\n",
    "   def get_recommendations(track_name, cosine_sim_matrix, df):\n",
    "       idx = df[df['track_name'] == track_name].index[0]\n",
    "       sim_scores = list(enumerate(cosine_sim_matrix[idx]))\n",
    "       sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "       sim_scores = sim_scores[1:6]  # Top 5 similar tracks (excluding itself)\n",
    "       track_indices = [i[0] for i in sim_scores]\n",
    "       return df['track_name'].iloc[track_indices]\n",
    "\n",
    "# Example: Choose a track name that exists in your dataset\n",
    "track_to_recommend =  'Typhoon - Original Mix'\n",
    "\n",
    "# Check if the chosen track name exists in the DataFrame\n",
    "if track_to_recommend in df['track_name'].values:\n",
    "   recommendations = get_recommendations(track_to_recommend, cosine_sim, df)\n",
    "\n",
    "   # Display the recommendations\n",
    "   print(f\"Top 5 Recommendations for '{track_to_recommend}':\")\n",
    "   print(recommendations)\n",
    "else:\n",
    "   print(f\"The track '{track_to_recommend}' does not exist in the DataFrame.\")\n",
    "\n",
    "\n",
    "# In[ ]:\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
